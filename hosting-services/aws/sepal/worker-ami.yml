- name: Configure Sandbox Image
  strategy: debug
  hosts: default
  user: ec2-user
  become: yes
  gather_facts: true

  tasks:
    - name: "Disable automatic yum upgrades"
      replace:
        path: /etc/cloud/cloud.cfg
        regexp: ' - package-update-upgrade-install'
        replace: ' #- package-update-upgrade-install'

    - name: Create /data/sepal
      file:
        path: "/data/sepal"
        state: directory

    - name: Create /data/ldap
      file:
        path: "/data/sepal"
        state: directory

    - name: Create /data/ldap/certificates
      file:
        path: "/data/ldap/certificates"
        state: directory

    - name: Copy LDAP Certificate
      copy:
       src: "{{ CONFIG_HOME }}/certificates/ldap-ca.crt.pem"
       dest: "/data/ldap/certificates/ldap-ca.crt.pem"

    # EFS setup
    - name: Install nfs-utils
      dnf:
        name: "nfs-utils"

    - name: Install amazon-efs-utils
      dnf:
        name: 'amazon-efs-utils'

    - name: Set region in efs-utils.conf
      lineinfile:
        path: /etc/amazon/efs/efs-utils.conf
        search_string: "#region"
        line: "region = {{ lookup('env', 'AWS_REGION') }}"
      register: sshd_config


    - name: Set disable_fetch_ec2_metadata_token in efs-utils.conf
      lineinfile:
        path: /etc/amazon/efs/efs-utils.conf
        search_string: "disable_fetch_ec2_metadata_token"
        line: "disable_fetch_ec2_metadata_token = true"


    - name: Install Lustre
      dnf:
        name: lustre-client
        state: present

    - name: Create /data/sepal/home
      file:
        path: "/data/sepal/home"
        state: directory

    # https://www.freedesktop.org/software/systemd/man/latest/systemd.mount.html
    - name: Mount /data/sepal/home from EFS
      lineinfile:
        path: '/etc/fstab'
        line: "{{ lookup('env', 'AWS_EFS_ID') }}:/data/sepal/home /data/sepal/home efs defaults,_netdev,x-systemd.requires=systemd-networkd-wait-online.service,x-systemd.mount-timeout=infinity,retry=10000 0 0"

    - name: Create /data/sepal/shiny
      file:
        path: "/data/sepal/shiny"
        state: directory

    - name: Mount /data/sepal/shiny from FSx
      lineinfile:
        path: '/etc/fstab'
        line: "{{ lookup('env', 'AWS_FSX_ID') }}/data/sepal/shiny /data/sepal/shiny lustre defaults,ro,noatime,flock,_netdev,x-systemd.requires=systemd-networkd-wait-online.service,x-systemd.mount-timeout=infinity,retry=10000 0 0"

    - name: Create /data/sepal/shared
      file:
        path: "/data/sepal/shared"
        state: directory

    - name: Mount /data/sepal/shared from FSx
      lineinfile:
        path: '/etc/fstab'
        line: "{{ lookup('env', 'AWS_FSX_ID') }}/data/sepal/shared /data/sepal/shared lustre defaults,ro,noatime,flock,_netdev,x-systemd.requires=systemd-networkd-wait-online.service,x-systemd.mount-timeout=infinity,retry=10000 0 0"

    - name: Create /data/sepal/jupyter
      file:
        path: "/data/sepal/jupyter"
        state: directory

    - name: Mount /data/sepal/jupyter from FSx
      lineinfile:
        path: '/etc/fstab'
        line: "{{ lookup('env', 'AWS_FSX_ID') }}/data/sepal/jupyter /data/sepal/jupyter lustre defaults,ro,noatime,flock,_netdev,x-systemd.requires=systemd-networkd-wait-online.service,x-systemd.mount-timeout=infinity,retry=10000 0 0"

    # Docker setup
    - name: Create filesystem on Docker volume
      filesystem:
        fstype: xfs
        dev: /dev/xvdf

    - name: Mount Docker volume
      mount:
        path: /var/lib/docker
        src: /dev/xvdf
        fstype: xfs
        state: mounted

    - name: Create docker-registry certificate dir
      file:
        path: "/etc/docker/certs.d/{{ lookup('env', 'DOCKER_REGISTRY_HOST') }}"
        state: directory

    - name: Copy docker-registry certificate
      copy:
        src: "{{ CONFIG_HOME }}/certificates/docker-registry.crt"
        dest: "/etc/docker/certs.d/{{ lookup('env', 'DOCKER_REGISTRY_HOST') }}/ca.crt"

    - name: Install docker
      dnf:
        name: docker
        state: present

    - name: Create /etc/docker
      file:
        path: "/etc/docker"
        state: directory

    - name: Copy /usr/local/bin/worker-runtime
      copy: 
        src: docker/worker-runtime.sh
        dest: /usr/local/bin/worker-runtime
        mode: u=rwx,g=rx,o=rx
    
    - name: Copy /etc/docker/daemon.json
      copy: src=docker/worker-daemon.json dest=/etc/docker/daemon.json

    - name: Add ec2-user to docker group
      user:
        name: ec2-user
        groups: docker

    - name: Create /etc/systemd/system/docker.service.d
      file:
        path: "/etc/systemd/system/docker.service.d"
        state: directory
    - name: Copy /etc/systemd/system/docker.service.d/docker.conf
      copy: src=docker/docker.conf dest=/etc/systemd/system/docker.service.d/docker.conf

    - name: Enable docker
      systemd:
        name: docker
        state: started
        enabled: yes
        masked: no

    - docker_network:
        name: sepal
        ipam_config:
          - subnet: 172.20.0.0/16
            iprange: 172.20.0.0/24

    # GPU setup
    - name: Install GPU drivers
      script: "gpu/install-gpu-drivers.sh"
      
    - name: Login to docker registry
      command: "docker login -p '{{ lookup('env', 'DOCKER_REGISTRY_PASSWORD') }}' -u '{{ lookup('env', 'DOCKER_REGISTRY_USERNAME') }}' {{ lookup('env', 'DOCKER_REGISTRY_HOST') }}"

    - name: Pull sandbox
      command: "docker pull {{ lookup('env', 'DOCKER_REGISTRY_HOST') }}/openforis/sandbox:{{ VERSION }}"

    - name: Pull task
      command: "docker pull {{ lookup('env', 'DOCKER_REGISTRY_HOST') }}/openforis/task:{{ VERSION }}"

    - name: Logout from docker registry
      command: "docker logout {{ lookup('env', 'DOCKER_REGISTRY_HOST') }}"

    # - name: Reboot Worker to sort out mount
    #   reboot:
