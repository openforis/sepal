- name: Configure Sepal instance
  hosts: all
  user: ec2-user
  become: yes
  gather_facts: true

  pre_tasks:
    - set_fact:
        SEPAL_IP: "{{ ec2_private_ip_address }}"
        SEPAL_SSH_IP: "{{ hostvars[inventory_hostname].ansible_eth0.ipv4_secondaries[0].address }}"
        SYSLOG_ADDRESS: "udp://{{ ec2_private_ip_address }}"

    # bash prompt
    - name: Set bash prompt
      blockinfile:
        path: /etc/profile
        block: |
          # Bash prompt
          PS1='{{ lookup('env', 'BASH_PROMPT') }}'

    # set locale
    - name: Set locale
      lineinfile:
        path: /etc/environment
        line: "{{ item }}"
      with_items:
        - "LANG=en_US.utf-8"
        - "LC_ALL=en_US.utf-8"

    # increase max_map_count to prevent out of memory errors
    - name: Increase max_map_count
      lineinfile:
        path: /etc/sysctl.conf
        line: "{{ item }}"
      with_items:
        - "vm.max_map_count=1048576"

    # monit
    # - name: Install EPEL repository
    #   yum:
    #     name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm"

    - name: Install monit
      yum:
        name: 'monit'

    - name: Stop monit
      systemd:
        name: monit
        state: stopped
        enabled: yes
        masked: no

    - name: Configure monit/1
      copy:
        src: "monit/monit.d/"
        dest: "/etc/monit.d/"
        owner: "root"
        group: "root"
        mode: "0644"

    - name: Configure monit/2
      template:
        src: "monit/config.template"
        dest: "/etc/monit.d/config"
        owner: "root"
        group: "root"
        mode: "0644"

    - name: Configure monit/3
      copy:
        src: "monit/check/"
        dest: "/usr/local/bin/"
        owner: "root"
        group: "root"
        mode: "0755"

    - name: Configure monit/4
      template:
        src: "monit/pushover-notify.template"
        dest: "/usr/local/bin/pushover-notify"
        owner: "root"
        group: "root"
        mode: "0755"

    - file: path="/data/sepal/etc" state=directory
    - template: src="./aws.properties" dest=/data/sepal/etc/aws.properties

    # sshd
    - name: Bind sshd to primary private IP
      lineinfile:
        path: /etc/ssh/sshd_config
        line: "ListenAddress {{ ec2_private_ip_address }}"
        insertafter: "#ListenAddress"
      register: sshd_config

    - name: Restart sshd
      service:
        name: sshd
        state: restarted
      when: sshd_config.changed

    # # rsyslog
    - name: Copy rsyslog.conf
      template: src="rsyslog.conf" dest=/etc/rsyslog.conf

    # Transitional: remove previously installed configuration
    - name: Remove /etc/rsyslog.d/docker.conf
      file:
        path: "/etc/rsyslog.d/docker.conf"
        state: absent
    
    # Transitional: remove previously installed configuration
    - name: Remove /etc/rsyslog.d/worker-instance.conf
      file:
        path: "/etc/rsyslog.d/worker-instance.conf"
        state: absent
    
    - name: Start rsyslog
      service: name=rsyslog state=restarted

    # Transitional: remove previously installed configuration
    - name: Remove /etc/logrotate.d/docker
      file:
        path: "/etc/logrotate.d/docker"
        state: absent
    
    # Transitional: remove previously installed configuration
    - name: Remove /etc/logrotate.d/worker-instance
      file:
        path: "/etc/logrotate.d/worker-instance"
        state: absent
    
    # Install multitail
    - name: Install multitail
      yum:
        name: "multitail"

    # Install htop
    - name: Install htop
      yum:
        name: "htop"

    # profile.d
    - name: Copy profile.d
      copy:
        src: "profile.d/"
        dest: "/etc/profile.d/"
        owner: "root"
        group: "root"
        mode: "0644"

    # docker
    - file: path="/data/docker/storage/devicemapper/metadata" state=directory
    - file: path="/data/docker/storage/tmp" state=directory

    - name: Create docker-registry certificate dir
      file:
        path: "/etc/docker/certs.d/{{ lookup('env', 'DOCKER_REGISTRY_HOST') }}"
        state: directory

    - name: Create docker log dir
      file:
        path: "/var/log/docker/containers"
        state: directory

    - name: Copy docker-registry certificate
      copy:
        src: "{{ CONFIG_HOME }}/certificates/docker-registry.crt"
        dest: "/etc/docker/certs.d/{{ lookup('env', 'DOCKER_REGISTRY_HOST') }}/ca.crt"

    - name: Install docker
      command: "amazon-linux-extras install docker -y"

    - name: Install Development Tools
      yum:
        name: "@Development Tools"

    - name: Create /etc/docker
      file:
        path: "/etc/docker"
        state: directory

    - name: Copy /etc/docker/daemon.json
      template: src=docker/main-daemon.json dest=/etc/docker/daemon.json
#
    - name: Add ec2-user to docker group
      user:
        name: ec2-user
        groups: docker
#
    - name: Enable docker
      systemd:
        name: docker
        state: started
        enabled: yes
        masked: no

    - name: pip install urllib3
      pip:
        name: urllib3==1.26.18
        executable: pip3

    - name: pip install requests
      pip:
        name: requests
        executable: pip3

    - docker_network:
        name: sepal
        ipam_config:
          - subnet: 172.20.0.0/16
            iprange: 172.20.0.0/24

    - file: path="/usr/local/lib/docker/cli-plugins" state=directory
    - uri:
        url: https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-linux-x86_64
        dest: /usr/local/lib/docker/cli-plugins/docker-compose
        mode: +x
        status_code: [200, 304]

    - file: path="/etc/sepal/env.d" state=directory
    - name: Copy env file to env-config
      copy:
        src: "{{ env_file }}"
        dest: "/etc/sepal/env.d/env-config"

    - name: Creating env-current file
      copy:
        dest: "/etc/sepal/env.d/env-current"
        content: |
          SEPAL_VERSION={{ VERSION }}
          SEPAL_IP={{ SEPAL_IP }}
          SEPAL_SSH_IP={{ SEPAL_SSH_IP }}
          SYSLOG_ADDRESS={{ SYSLOG_ADDRESS }}

    - name: Assemble a single env file
      ansible.builtin.assemble:
        src: /etc/sepal/env.d
        dest: /etc/sepal/env

    - name: Copy logger docker compose file
      copy:
        src: "{{ lookup('env', 'PROJECT_DIR') }}/modules/docker-compose.logger.yml"
        dest: "/var/lib/sepal/modules/"

  post_tasks:
    - name: Start monit
      systemd:
        name: monit
        state: started
        enabled: yes
        masked: no

  roles:
    - { role: live-patching }
    - { role: aws-mount-efs }
    - { role: docker-login }

    - { role: run-module, module: logger }
    - { role: run-module, module: backup }
    - { role: run-module, module: rabbitmq }
    - { role: run-module, module: email }
    - { role: run-module, module: ldap }
    - { role: run-module, module: ldap-backup }
    - { role: run-module, module: mysql }
    - { role: run-module, module: mysql-backup }
    - { role: run-module, module: gee}
    - { role: run-module, module: user }
    - { role: run-module, module: app-manager }
    - { role: run-module, module: sepal-server }
    - { role: run-module, module: user-assets }
    - { role: run-module, module: user-files }
    - { role: run-module, module: gui }
    - { role: run-module, module: ceo-gateway }
    - { role: run-module, module: ssh-gateway }
    - { role: run-module, module: terminal }
    - { role: run-module, module: gateway }
    - { role: run-module, module: letsencrypt }
    - { role: run-module, module: haproxy }
    - { role: run-module, module: sys-monitor }
    - { role: run-module, module: scene-metadata }
